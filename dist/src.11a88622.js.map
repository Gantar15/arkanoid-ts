{"version":3,"sources":["view/CanvasView.ts","sprites/Ball.ts","sprites/Paddle.ts","Collision.ts","setup.ts","sprites/Brick.ts","helpers.ts","index.ts"],"names":[],"mappings":"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","file":"src.11a88622.js","sourceRoot":"..\\src","sourcesContent":["import Brick from \"../sprites/Brick\";\r\nimport Ball from \"../sprites/Ball\";\r\nimport Paddle from \"../sprites/Paddle\";\r\n\r\nexport class CanvasView{\r\n    public canvas: HTMLCanvasElement;\r\n    private context: CanvasRenderingContext2D | null;\r\n    private scoreDisplay: HTMLObjectElement | null;\r\n    public start: HTMLObjectElement | null;\r\n    public stop: HTMLObjectElement | null;\r\n    private info: HTMLObjectElement | null;\r\n    private backgroundImg: HTMLImageElement | null;\r\n\r\n    constructor(canvasName: string){\r\n        this.canvas = document.querySelector(canvasName) as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext(\"2d\");\r\n        this.scoreDisplay = document.querySelector('#score');\r\n        this.start = document.querySelector(\"#start\");\r\n        this.info = document.querySelector(\"#info\");\r\n        this.stop = document.querySelector(\"#stop\");\r\n        this.backgroundImg = document.querySelector('#background');\r\n    }\r\n\r\n    get backgroundSrc(){\r\n        if(this.backgroundImg)\r\n            return this.backgroundImg.src;\r\n        return \"\";\r\n    }\r\n    set backgroundSrc(src: string){\r\n        if(this.backgroundImg)\r\n            this.backgroundImg.src = src;\r\n    }\r\n\r\n    clear(): void{\r\n        this.context?.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    initStartButton(startFunction: (view: CanvasView) => void): void {\r\n        this.start?.addEventListener('click', () => startFunction(this));\r\n    }\r\n\r\n    initStopButton(stopFunction: (view: CanvasView) => void): void {\r\n        this.stop?.addEventListener('click', () => stopFunction(this));\r\n    }\r\n\r\n    drawScore(score: number): void{\r\n        if(this.scoreDisplay) this.scoreDisplay.innerText = score.toString();\r\n    }\r\n\r\n    drawInfo(text: string): void {\r\n        if (this.info) this.info.innerHTML = text;\r\n    }\r\n\r\n    drawSprite(brick: Brick | Paddle | Ball): void{\r\n        this.context?.drawImage(\r\n            brick.image,\r\n            brick.pos.x,\r\n            brick.pos.y,\r\n            brick.width,\r\n            brick.height\r\n        );\r\n    }\r\n\r\n    drawBricks(bricks: Brick[]): void{\r\n        bricks.forEach(brick => this.drawSprite(brick));\r\n    }\r\n}","import { Vector } from '../types';\r\n\r\nexport default class Ball{\r\n    private speed: Vector;\r\n    private ballImage: HTMLImageElement = new Image();\r\n\r\n    constructor(\r\n        speed: number,\r\n        private size: number,\r\n        private position: Vector,\r\n        image: string \r\n    ){\r\n        this.speed = {\r\n            x: speed,\r\n            y: -speed\r\n        }\r\n        this.ballImage.src = image;\r\n    }\r\n\r\n    get width(): number {\r\n        return this.size;\r\n    }\r\n    \r\n    get height(): number {\r\n        return this.size;\r\n    }\r\n    \r\n    get pos(): Vector {\r\n        return this.position;\r\n    }\r\n    \r\n    get image(): HTMLImageElement {\r\n        return this.ballImage;\r\n    }\r\n\r\n    changeYDirection(): void {\r\n        this.speed.y = -this.speed.y;\r\n    }\r\n    \r\n    changeXDirection(): void {\r\n        this.speed.x = -this.speed.x;\r\n    }\r\n    \r\n    moveBall(): void {\r\n        this.pos.x += this.speed.x;\r\n        this.pos.y += this.speed.y;\r\n    }\r\n}","import { Vector } from '../types';\r\n\r\nexport default class Paddle{\r\n  private paddleImage: HTMLImageElement = new Image();\r\n  private moveLeft: boolean;\r\n  private moveRight: boolean;\r\n\r\n  constructor(\r\n    private speed: number,\r\n    private paddleWidth: number,\r\n    private paddleHeight: number,\r\n    private position: Vector,\r\n    image: string\r\n  ) {\r\n    this.moveLeft = false;\r\n    this.moveRight = false;\r\n    this.paddleImage.src = image;\r\n\r\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\r\n    document.addEventListener('keyup', this.handleKeyUp.bind(this));\r\n  }\r\n\r\n  get width(): number {\r\n    return this.paddleWidth;\r\n  }\r\n\r\n  get height(): number {\r\n    return this.paddleHeight;\r\n  }\r\n\r\n  get pos(): Vector {\r\n    return this.position;\r\n  }\r\n\r\n  get image(): HTMLImageElement {\r\n    return this.paddleImage;\r\n  }\r\n\r\n  get isMovingLeft(): boolean {\r\n    return this.moveLeft;\r\n  }\r\n\r\n  get isMovingRight(): boolean {\r\n    return this.moveRight;\r\n  }\r\n\r\n  movePaddle(): void {\r\n    if (this.moveLeft) this.pos.x -= this.speed;\r\n    if (this.moveRight) this.pos.x += this.speed;\r\n  }\r\n\r\n  handleKeyDown(event: KeyboardEvent): void{\r\n    if(event.key === \"ArrowRight\"){\r\n        this.moveRight = true;\r\n    }\r\n    else if(event.key === \"ArrowLeft\"){\r\n        this.moveLeft = true;\r\n    }\r\n  }\r\n\r\n  handleKeyUp(event: KeyboardEvent): void{\r\n    if(event.key === \"ArrowRight\"){\r\n        this.moveRight = false;\r\n    }\r\n    else if(event.key === \"ArrowLeft\"){\r\n        this.moveLeft = false;\r\n    }\r\n  }\r\n}","import {CanvasView} from \"./view/CanvasView\";\r\nimport Ball from './sprites/Ball';\r\nimport Brick from './sprites/Brick';\r\nimport Paddle from './sprites/Paddle';\r\n\r\nexport default class Collision{\r\n    static checkBallCollision(ball: Ball, paddle: Paddle, view: CanvasView, gameOverCllbk: (view: CanvasView) => void): void {\r\n        // 1. Check ball collision with paddle\r\n        if (\r\n          ball.pos.x + ball.width > paddle.pos.x &&\r\n          ball.pos.x < paddle.pos.x + paddle.width &&\r\n          ball.pos.y + ball.height >= paddle.pos.y\r\n        ) {\r\n            ball.changeYDirection();\r\n        }\r\n\r\n        // 2. Check ball collision with walls\r\n        // Ball movement X constraints\r\n        if(ball.pos.x <= 0 || ball.pos.x + ball.width >= view.canvas.width)\r\n            ball.changeXDirection();\r\n\r\n        // Ball movement Y constraints\r\n        if(ball.pos.y <= 0)\r\n            ball.changeYDirection();\r\n\r\n        // 3. Check gameover\r\n        if(ball.pos.y + ball.height > view.canvas.height){\r\n            gameOverCllbk(view);\r\n        }\r\n    }\r\n\r\n    static isCollidingBrick(ball: Ball, brick: Brick): boolean{\r\n        if(ball.pos.x < brick.pos.x + brick.width &&\r\n            ball.pos.x + ball.width > brick.pos.x &&\r\n            ball.pos.y < brick.pos.y + brick.height &&\r\n            ball.pos.y + ball.height > brick.pos.y){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static reduceCollidingBricks(ball: Ball, bricks: Brick[]): number{\r\n        let scorePower: number = 0;\r\n\r\n        bricks.forEach((brick, index) => {\r\n            if(Collision.isCollidingBrick(ball, brick)){\r\n                if(brick.energy === 0){\r\n                    bricks.splice(index, 1);\r\n                    scorePower = brick.power;\r\n                }\r\n                else\r\n                    --brick.energy;\r\n                ball.changeYDirection();\r\n            }\r\n        });\r\n        return scorePower;\r\n    }\r\n}\r\n","import RED_BRICK_IMAGE from './images/brick-red.png';\nimport BLUE_BRICK_IMAGE from './images/brick-blue.png';\nimport GREEN_BRICK_IMAGE from './images/brick-green.png';\nimport YELLOW_BRICK_IMAGE from './images/brick-yellow.png';\nimport PURPLE_BRICK_IMAGE from './images/brick-purple.png';\nimport WIN_BCAKGROUND_IMAGE from \"./images/winbg.png\";\nexport const WIN_BCAKGROUND_SRC = WIN_BCAKGROUND_IMAGE;\n\nconst canvas: HTMLCanvasElement | null = document.querySelector('#playField');\n\nexport const STAGE_PADDING = 10;\nexport const STAGE_ROWS = 20;\nexport const STAGE_COLS = 10;\nexport const BRICK_PADDING = 5;\nexport const BRICK_WIDTH = canvas\n  ? Math.floor((canvas.width - STAGE_PADDING * 2) / STAGE_COLS) - BRICK_PADDING\n  : 100;\nexport const BRICK_HEIGHT = canvas\n  ? Math.floor((canvas.height - STAGE_PADDING * 2) / STAGE_ROWS) - BRICK_PADDING\n  : 30;\nexport const PADDLE_WIDTH = 150;\nexport const PADDLE_HEIGHT = 45;\nexport const PADDLE_STARTX = 425;\nexport const PADDLE_SPEED = 12;\nexport const BALL_SPEED = 8;\nexport const BALL_SIZE = 20;\nexport const BALL_STARTX = 500;\nexport const BALL_STARTY = 400;\n\nexport const BRICK_IMAGES: { [key: number]: string } = {\n  1: RED_BRICK_IMAGE,\n  2: GREEN_BRICK_IMAGE,\n  3: YELLOW_BRICK_IMAGE,\n  4: BLUE_BRICK_IMAGE,\n  5: PURPLE_BRICK_IMAGE\n};\n\nexport const BRICK_ENERGY: { [key: number]: number } = {\n  1: 1, // Red brick\n  2: 1, // Green brick\n  3: 2, // Yellow brick\n  4: 2, // Blue brick\n  5: 3 // Purple brick\n};\n\nexport const LEVEL = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 1, 1, 1, 1, 1, 1, 0, 0,\n  0, 2, 2, 2, 2, 2, 2, 2, 2, 0,\n  0, 3, 3, 3, 3, 3, 3, 3, 3, 0,\n  0, 0, 4, 4, 3, 3, 4, 4, 0, 0, \n  0, 0, 1, 2, 0, 0, 2, 1, 0, 0,\n];\n","import { Vector } from '../types';\r\n\r\nexport default class Brick{\r\n    private brickImage: HTMLImageElement = new Image();\r\n    private readonly price: number;\r\n\r\n    constructor(\r\n        private brickWidth: number,\r\n        private brickHeight: number,\r\n        private position: Vector,\r\n        private brickEnergy: number,\r\n        image: string\r\n    ){\r\n        this.brickImage.src = image;\r\n        this.price = brickEnergy;\r\n    }\r\n\r\n    get width(): number {\r\n        return this.brickWidth;\r\n    }\r\n    \r\n    get height(): number {\r\n    return this.brickHeight;\r\n    }\r\n    \r\n    get pos(): Vector {\r\n    return this.position;\r\n    }\r\n    \r\n    get image(): HTMLImageElement {\r\n    return this.brickImage;\r\n    }\r\n    \r\n    get energy(): number {\r\n    return this.brickEnergy;\r\n    }\r\n\r\n    get power(): number{\r\n        return this.price;\r\n    }\r\n    \r\n    set energy(energy: number) {\r\n    this.brickEnergy = energy;\r\n    }\r\n}","import Brick from \"./sprites/Brick\";\r\n\r\nimport {\r\n    BRICK_IMAGES,\r\n    LEVEL,\r\n    STAGE_COLS,\r\n    STAGE_PADDING,\r\n    BRICK_WIDTH,\r\n    BRICK_HEIGHT,\r\n    BRICK_PADDING,\r\n    BRICK_ENERGY\r\n  } from './setup';\r\n\r\nexport function createBricks(): Brick[] {\r\n    return LEVEL.reduce((ack, element, i) => {\r\n        const row = Math.floor((i) / STAGE_COLS);\r\n        const col = i % STAGE_COLS;\r\n    \r\n        const x = STAGE_PADDING + col * (BRICK_WIDTH + BRICK_PADDING);\r\n        const y = STAGE_PADDING + row * (BRICK_HEIGHT + BRICK_PADDING);\r\n    \r\n        if (element === 0) return ack;\r\n    \r\n        return [\r\n            ...ack,\r\n            new Brick(\r\n              BRICK_WIDTH,\r\n              BRICK_HEIGHT,\r\n              { x, y },\r\n              BRICK_ENERGY[element],\r\n              BRICK_IMAGES[element]\r\n            )\r\n          ];\r\n    }, [] as Brick[]);\r\n}","import {CanvasView} from \"./view/CanvasView\";\nimport Ball from './sprites/Ball';\nimport Brick from './sprites/Brick';\nimport Paddle from './sprites/Paddle';\nimport Collision from './Collision';\n\nimport PADDLE_IMAGE from './images/paddle.png';\nimport BALL_IMAGE from './images/ball.png';\nimport {WIN_BCAKGROUND_SRC} from './setup';\n\nimport {\n    PADDLE_SPEED,\n    PADDLE_WIDTH,\n    PADDLE_HEIGHT,\n    PADDLE_STARTX,\n    BALL_SPEED,\n    BALL_SIZE,\n    BALL_STARTX,\n    BALL_STARTY,\n    BRICK_PADDING\n  } from './setup';\n  \nimport {createBricks} from \"./helpers\";\n\nlet BASE_BACKGROUND_SRC: string;\nlet gameOver = false;\nlet score = 0;\n  \nfunction setGameOver(view: CanvasView) {\n  stopGame(view);\n  view.drawInfo('Game Over!');\n  gameOver = true;\n}\n\nfunction setGameWin(view: CanvasView) {\n  stopGame(view);\n  view.drawInfo('Game Won!');\n  view.backgroundSrc = WIN_BCAKGROUND_SRC;\n  gameOver = true;\n}\n\nfunction gameLoop(\n  view: CanvasView,\n  bricks: Brick[],\n  paddle: Paddle,\n  ball: Ball,\n){\n  console.log('render!');\n  view.clear();\n  view.drawBricks(bricks);\n  view.drawSprite(paddle);\n  view.drawSprite(ball);\n\n  ball.moveBall();\n\n  if (\n    paddle.isMovingLeft && paddle.pos.x > 0 ||\n    paddle.isMovingRight && paddle.pos.x + paddle.width < view.canvas.width\n  ) {\n    paddle.movePaddle();\n  }\n  \n  //Collision\n  Collision.checkBallCollision(ball, paddle, view, setGameOver);\n  const scoreAdder = Collision.reduceCollidingBricks(ball, bricks);\n  score += scoreAdder;\n\n  //Won \n  if(!bricks.length)\n    setGameWin(view);\n\n  view.drawScore(score);\n  //Gameover\n  if(gameOver){\n    return;\n  }\n  requestAnimationFrame(() => gameLoop(view, bricks, paddle, ball));\n}\n\nfunction startGame(view: CanvasView){\n    gameOver = false;\n    console.log(\"start game!\");\n    view.backgroundSrc = BASE_BACKGROUND_SRC;\n    view.drawInfo(\"playing...\");\n    view.drawScore(score);\n\n    const paddle = new Paddle(\n      PADDLE_SPEED,\n      PADDLE_WIDTH, \n      PADDLE_HEIGHT, \n      {x: PADDLE_STARTX,\n      y: view.canvas.height - PADDLE_HEIGHT - BRICK_PADDING},\n      PADDLE_IMAGE);\n\n    const ball = new Ball(\n      BALL_SPEED,\n      BALL_SIZE,\n      {\n        x: BALL_STARTX,\n        y: BALL_STARTY\n      },\n      BALL_IMAGE\n    );\n\n    const bricks = createBricks();\n\n    if(view.start && view.stop){\n      view.start.style.display = \"none\";\n      view.stop.style.display = \"\";\n    }\n\n    gameLoop(view, bricks, paddle, ball);\n}\n\nfunction stopGame(view: CanvasView){\n  console.log(\"stop game!\");\n  view.drawInfo(\"Press play!\");\n\n  if(view.start && view.stop){\n    view.start.style.display = \"\";\n    view.stop.style.display = \"none\";\n  }\n\n  gameOver = true;\n  score = 0;\n}\n\nconst view = new CanvasView('#playField');\nBASE_BACKGROUND_SRC = view.backgroundSrc;\nview.initStartButton(startGame);\nview.initStopButton(stopGame);"]}